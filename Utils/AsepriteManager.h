//
// Created by weitnow on 12/16/23.
//

#ifndef GBFIGHTER_ASEPRITEMANAGER_H
#define GBFIGHTER_ASEPRITEMANAGER_H

#include "../nlohmann/json.hpp"
#include "raylib.h"
#include <fstream>
#include <iostream>
#include <map>
#include <string>

struct FrameTag; // forward declaration

// --------------------------------- AsepriteAnimationFile class --------------------------------- //
/**
 * @param filename filename of the aseprite file
 * @param frameTags map of frame tags e.g. idle, walk, jump, etc.
 *
 */
class AsepriteAnimationFile
{
private:
    std::string filename;
    Texture2D texture;
    std::string current_tag;
    int current_frame;
    int min_frame;
    int max_frame;
    Color current_color;
    float current_scale;

    float update_counter;

public:
    // constructor
    explicit AsepriteAnimationFile(std::string filename, std::string foldername);

    // destructor
    ~AsepriteAnimationFile();

    // methods
    FrameTag getFrameTag(const std::string& tagname);
    void drawFrame(const std::string& tagname, int x, int y, float scale = 1.0f, Color tint = WHITE);
    void drawCurrentSelectedTag(int x, int y);
    void update(float deltaTime);
    void nextFrame();
    void setFrameTag(const std::string& tagname);

    // member variables
    std::map<std::string, FrameTag> frameTags;
};

// --------------------------------- AsepriteManager class --------------------------------- //

/**
 * @class AsepriteManager
 * @brief The object instantiated of this class controlls the loading of sprites
 * @param[in] foldername where the png and json-files of the aseprite-assets are located
 */
class AsepriteManager
{
public:
    explicit AsepriteManager(std::string foldername);
    ~AsepriteManager();

    // methods
    /**
     * @brief loads the png and json file generated by aseprite and stores it in a membervariable of the class, which is a map<std::string, AsepriteAnimationFile*>
     *
     * @param filename the filename without extension of the png and json file of aseprite. For example "gbFighter"
     */
    void loadAnimFile(const std::string& filename);

    void showLoadedAnimFiles();

    /**
     * @brief Get the Anim File object
     *
     * @param filename
     * @return AsepriteAnimationFile*
     */
    AsepriteAnimationFile* getAnimFile(const std::string& filename);
    void UnloadRessources();

    // member variable
    std::map<std::string, AsepriteAnimationFile*> animFiles; // map<animationfilename><animationobject*>
private:
    std::string foldername;
    nlohmann::json* loadJsonFile(const std::string& filename);
};

// --------------------------------- FrameTag struct --------------------------------- //

struct FrameTag
{
    std::string name;
    std::string direction;
    bool loop;
    int duration;
    int from;
    int to;
};

#endif // GBFIGHTER_ASEPRITEMANAGER_H
